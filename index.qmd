
# load cleaned data

This will take a long time to run if you've yet to download the data. Otherwise the function will find and load the last cleaned download:

```{r}
library(tidyverse)
source("download_and_clean_police_data.R")

cleaned_outcomes_data <- download_and_process_police_data()
```

# Basic Dashboard

```{r}
library(tidyverse)
library(shiny)
library(lubridate)

cleaned_police_data_grouped <- cleaned_police_data %>% 
    group_by(reported_by, month, outcome) %>% 
    summarise(count = n()) 

# UI
ui <- fluidPage(
  titlePanel("Police Data"),
  
  sidebarLayout(
    sidebarPanel(
      checkboxGroupInput("selected_forces", "Select Forces:",
                         choices = unique(cleaned_police_data$reported_by),
                         selected = unique(cleaned_police_data$reported_by)),
      
      dateInput("from_date", "From Date:",
                value = ymd(paste0(min(cleaned_police_data$month), "-01")),
                format = "yyyy-mm"),
      
      dateInput("to_date", "To Date:",
                value = ymd(paste0(max(cleaned_police_data$month), "-01")),
                format = "yyyy-mm"),
      
      checkboxGroupInput("selected_outcomes", "Select Outcomes:",
                         choices = unique(cleaned_police_data$outcome),
                         selected = unique(cleaned_police_data$outcome))
    ),
    
    mainPanel(
      plotOutput("plot", height = "100%")
    )
  ),
  
  tags$style(type = "text/css", "
    #plot {
      height: calc(100vh - 200px);
      width: 100%;
      resize: both;
      overflow: auto;
    }
  ")
)

server <- function(input, output) {
  # Filter the data based on selected forces, date range, and outcomes
  filtered_data <- reactive({
    req(input$from_date, input$to_date)
    cleaned_police_data_grouped %>%
      filter(reported_by %in% input$selected_forces,
             month >= format(input$from_date, "%Y-%m"),
             month <= format(input$to_date, "%Y-%m"),
             outcome %in% input$selected_outcomes)
  })
  
  # Create the plot
  output$plot <- renderPlot({
    # Aggregate the data to get the counts of each outcome for each force
    aggregated_data <- filtered_data() %>% 
        group_by(reported_by, outcome) %>% 
        summarise(n = sum(count)) %>% 
        ungroup() %>%
        group_by(reported_by) %>%
        mutate(proportion = n / sum(n))
    
    # Define colors for each outcome
    outcome_colors <- c("Unable to prosecute suspect" = "#E69F00",
                        "Action to be taken by another organisation" = "#56B4E9",
                        "Suspect charged" = "#009E73",
                        "Investigation complete; no suspect identified" = "#F0E442",
                        "Offender given a caution" = "#0072B2",
                        "Further action not in the public interest" = "#D55E00",
                        "Local resolution" = "#CC79A7",
                        "Offender given penalty notice" = "#999999",
                        "Offender given a drugs possession warning" = "#FF6347",
                        "Suspect charged as part of another case" = "#9370DB")
    
    # Create the graph using ggplot2
    ggplot(aggregated_data, aes(x = proportion, y = fct_rev(reported_by), fill = outcome)) +
      geom_bar(stat = "identity", position = "fill") +
      labs(x = NULL, y = NULL, fill = NULL) +
      theme_minimal() +
      theme(axis.text.y = element_text(size = 12),
            legend.position = "top",
            legend.key.size = unit(1, "cm"),
            legend.text = element_text(size = 10),
            panel.grid.major.x = element_blank(),
            panel.grid.minor.x = element_blank()) +
      guides(fill = guide_legend(nrow = 3)) +
      scale_fill_manual(values = outcome_colors)
  }, height = 800)
}

# Run the app
shinyApp(ui, server)
```

